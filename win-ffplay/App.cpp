#include "stdafx.h"
#include "App.h"

CApp *CApp::m_instance = nullptr;;


//============================================================================
CApp*
CApp::instance(
void
)
//============================================================================
{
	if (!m_instance) 
	{
		m_instance = new CApp;
	}
	return m_instance;
}

CApp::CApp()
{
	
}


CApp::~CApp()
{
}


void CApp::InitTheme()
{
	QYApp::loadTheme("theme.xml");
#if 1


		SafeStrcpy(QY_THEME.DLG_FONT_TYPE, L"MS Shell Dlg 2");
		SafeStrcpy(QY_THEME.MS_YAHEI_FONT_TYPE, L"Î¢ÈíÑÅºÚ");
		SafeStrcpy(QY_THEME.CAPTION_FONT_TYPE, QY_THEME.MS_YAHEI_FONT_TYPE);
		SafeStrcpy(QY_THEME.CAPTION_FONT_TYPE_2, L"Terminal");

		QY_THEME.CAPTION_BK_GRADIENT = FALSE;
		QY_THEME.DEFAULT_FONT_WIDTH = 6;
		QY_THEME.CAPTION_FONT_WIDTH = 6;
		QY_THEME.CAPTION_FONT_HEIGHT = 12;
		QY_THEME.BUTTON_FONT_SIZE = 16;
		QY_THEME.DLG_FONT_SIZE = 16;

		static int MS_YAHEI_FONT_WEIGHT = FW_NORMAL;
		static int MS_YAHEI_FONT_SIZE = 17;
		static int CAPTION_FONT_SIZE = QY_THEME.MS_YAHEI_FONT_SIZE;
		static int CAPTION_FONT_SIZE_2 = 17;
		QY_THEME.TITLE_FONT_SIZE = 18;
		QY_THEME.DEFAULT_CTRL_HEIGHT = 24;
		QY_THEME.DEFAULT_CAPTION_HEIGHT = 30;

		QY_THEME.CAPTION_COLOR = RGB(51, 51, 51);
		QY_THEME.DLG_CAPTION_COLOR = RGB(51, 51, 51);
		QY_THEME.CLIENT_COLOR = QY_THEME.CAPTION_COLOR;
		QY_THEME.DLG_CLIENT_COLOR = QY_THEME.DLG_CAPTION_COLOR;

		QY_THEME.BORDER_PEN_COLOR_ACTIVE = QY_THEME.CAPTION_COLOR;
		QY_THEME.BORDER_PEN_COLOR_UNACTIVE = QY_THEME.CAPTION_COLOR;
		QY_THEME.DLG_BORDER_PEN_COLOR_ACTIVE = RGB(0, 0, 0);
		QY_THEME.DLG_BORDER_PEN_COLOR_UNACTIVE = QY_THEME.DLG_BORDER_PEN_COLOR_ACTIVE;

		QY_THEME.SPLITTER_COLOR_NORMAL = RGB(0, 0, 0);
		QY_THEME.SPLITTER_COLOR_HOVER = QY_THEME.SPLITTER_COLOR_NORMAL;
		QY_THEME.SPLITTER_COLOR_DOWN = QY_THEME.SPLITTER_COLOR_HOVER;


		QY_THEME.DIALOG_CAPTION_HEIGHT = 33;
		QY_THEME.WINDOW_BORDER_WIDTH = 1;
		QY_THEME.WINDOW_SHADOW_SIDE_LEN_LEFT_TOP = 10;
		QY_THEME.WINDOW_SHADOW_SIDE_LEN_RIGHT_BOTTOM = 10;
		QY_THEME.DEFAULT_TAB_HEIGHT = 32;

		QY_THEME.CAPTION_TEXT_COLOR_ACTIVE = RGB(222, 222, 222);
		QY_THEME.CAPTION_TEXT_COLOR = RGB(160, 163, 172);
		QY_THEME.DLG_BUTTON_PANE_BK_COLOR = RGB(45, 45, 45);
		QY_THEME.BUTTON_TEXT_COLOR_NORMAL = QY_THEME.TEXT_COLOR_NORMAL;
		QY_THEME.BUTTON_TEXT_COLOR_DISABLE = RGB(122, 122, 122);

		QY_THEME.BUTTON_BK_COLOR_NORMAL = RGB(71, 71, 71);
		QY_THEME.BUTTON_BK_COLOR_HOVER = RGB(81, 81, 81);
		QY_THEME.BUTTON_BK_COLOR_DOWN = RGB(91, 91, 91);
		QY_THEME.BUTTON_BK_COLOR_FOCUS = QY_THEME.BUTTON_BK_COLOR_NORMAL;
		QY_THEME.BUTTON_BK_COLOR_DISABLE = RGB(81, 81, 81);

		QY_THEME.BUTTON_BORDER_COLOR_NORMAL = RGB(70, 140, 190);
		QY_THEME.BUTTON_BORDER_COLOR_HOVER = QY_THEME.BUTTON_BORDER_COLOR_NORMAL;
		QY_THEME.BUTTON_BORDER_COLOR_FOCUS = QY_THEME.BUTTON_BORDER_COLOR_HOVER;
		QY_THEME.BUTTON_BORDER_COLOR_DOWN = QY_THEME.BUTTON_BORDER_COLOR_HOVER;
		QY_THEME.BUTTON_BORDER_COLOR_DISABLE = QY_THEME.CLIENT_COLOR;

		QY_THEME.EDIT_SELECT_COLOR = RGB(122, 200, 255);
		QY_THEME.EDIT_BK_COLOR_NORMAL = QY_THEME.CLIENT_COLOR;
		QY_THEME.EDIT_BK_COLOR_HOVER = QY_THEME.EDIT_BK_COLOR_NORMAL;
		QY_THEME.EDIT_BK_COLOR_FOCUS = QY_THEME.EDIT_BK_COLOR_NORMAL;
		QY_THEME.EDIT_BK_COLOR_READONLY = QY_THEME.CLIENT_COLOR;

		//QY_THEME.EDIT_BORDER_COLOR_NORMAL = BUTTON_BORDER_COLOR_NORMAL;
		QY_THEME.EDIT_BORDER_COLOR_HOVER = RGB(0, 0, 0);
		//QY_THEME.EDIT_BORDER_COLOR_FOCUS = BORDER_PEN_COLOR_ACTIVE;

		QY_THEME.CLOSE_BOX_BK_COLOR_NORMAL = QY_THEME.CAPTION_COLOR;
		QY_THEME.CLOSE_BOX_BK_COLOR_DOWN = RGB(166, 42, 21);
		QY_THEME.CLOSE_BOX_BK_COLOR_HOT = RGB(212, 64, 39);

		QY_THEME.SYS_BOX_PEN_COLOR_HOT = RGB(255, 255, 255);
		QY_THEME.SYS_BOX_PEN_COLOR_NORMAL = RGB(160, 163, 172);
		QY_THEME.SYS_BOX_PEN_COLOR_NORMAL_ACTIVE = RGB(255, 255, 255);
		QY_THEME.SYS_BOX_PEN_WIDTH = 1;
		QY_THEME.SYS_BOX_PEN_COLOR_DISABLE = RGB(222, 222, 222);

		QY_THEME.SYS_BOX_BK_COLOR_NORMAL = QY_THEME.CAPTION_COLOR;
		QY_THEME.SYS_BOX_BK_COLOR_DOWN = RGB(38, 124, 194);
		QY_THEME.SYS_BOX_BK_COLOR_HOT = RGB(58, 149, 222);


		QY_THEME.EDIT_BORDER_COLOR_FOCUS = RGB(70, 140, 190);;
		QY_THEME.EDIT_BORDER_COLOR_NORMAL = RGB(22, 22, 22);;

		QY_THEME.COMBOBOX_ARROW_PEN_COLOR_NORMAL = RGB(132, 132, 132);
		QY_THEME.COMBOBOX_ARROW_BK_COLOR_HOVER = RGB(51, 51, 51);
		QY_THEME.COMBOBOX_ARROW_BK_COLOR_DOWN = RGB(201, 222, 255);


		QY_THEME.LISTCTRL_BK_COLOR_NORMAL = QY_THEME.CLIENT_COLOR;
		QY_THEME.LISTCTRL_BK_COLOR_NORMAL2 = QY_THEME.LISTCTRL_BK_COLOR_NORMAL;
		QY_THEME.LISTCTRL_BK_COLOR_HOVER = QY_THEME.CLIENT_COLOR;
		QY_THEME.LISTCTRL_BK_COLOR_SELECT = RGB(68, 68, 68);
		QY_THEME.LISTCTRL_BK_COLOR_LOSE_FOCUS = QY_THEME.CLIENT_COLOR;
		QY_THEME.LISTCTRL_BORDER_COLOR = RGB(0, 0, 0);
		QY_THEME.LISTCTRL_SEPARATED_COLOR = RGB(22, 22, 22);

		QY_THEME.DROPLIST_BORDER_COLOR = QY_THEME.EDIT_BORDER_COLOR_FOCUS;

		QY_THEME.LISTBOX_BK_COLOR_NORMAL = QY_THEME.LISTCTRL_BK_COLOR_NORMAL;
		QY_THEME.LISTBOX_BK_COLOR_SELECT = QY_THEME.LISTCTRL_BK_COLOR_SELECT;
		QY_THEME.LISTBOX_BORDER_COLOR = QY_THEME.LISTCTRL_BORDER_COLOR;

		QY_THEME.MENU_BK_COLOR_NORMAL = RGB(51, 51, 51);
		QY_THEME.MENU_BK_COLOR_SELECT = RGB(0, 150, 255);

		QY_THEME.TOOLTIP_BK_COLOR_NORMAL = QY_THEME.MENU_BK_COLOR_NORMAL;
		QY_THEME.TOOLTIP_BORDER_COLOR = QY_THEME.BORDER_PEN_COLOR_ACTIVE;

		QY_THEME.HEADERCTRL_BK_COLOR_NORMAL = QY_THEME.CLIENT_COLOR;//RGB(233,233,233) RGB(107,165,215)//
		QY_THEME.HEADERCTRL_BK_COLOR_HOVER = RGB(51, 51, 51);
		QY_THEME.HEADERCTRL_BK_COLOR_DOWN = RGB(56, 56, 56);
		QY_THEME.HEADERCTRL_BORDER_COLOR = QY_THEME.EDIT_BORDER_COLOR_NORMAL;
		QY_THEME.HEADERCTRL_SEPARATED_COLOR = QY_THEME.DLG_BORDER_PEN_COLOR_ACTIVE;

		QY_THEME.PAGEPANE_BK_COLOR_NORMAL = RGB(255, 255, 255);

		QY_THEME.TAB_BOTTOM_SPLIT_COLOR = RGB(235, 235, 235);
		QY_THEME.TAB_BK_COLOR_HOT = RGB(50, 150, 250);
		QY_THEME.TAB_BK_COLOR_SEL = RGB(50, 150, 250);
		QY_THEME.TAB_BK_COLOR_NORMAL = QY_THEME.CLIENT_COLOR;
		QY_THEME.BUTTON_BK_COLOR_SEL = RGB(186, 212, 255);

		QY_THEME.ITEM_BK_COLOR_HOT = RGB(68, 68, 68);
		QY_THEME.ITEM_BK_COLOR_SEL = QY_THEME.ITEM_BK_COLOR_HOT;
		QY_THEME.ITEM_BORBER_COLOR_SEL = RGB(28, 151, 234);

		QY_THEME.DATETABLE_CURRENT_DAY_BK_COLOR = QY_THEME.LISTCTRL_BK_COLOR_SELECT;
		QY_THEME.DATETABLE_CURRENT_DAY_BORDER_COLOR = QY_THEME.EDIT_BORDER_COLOR_FOCUS;
		QY_THEME.DATETABLE_MARK_DAY_BK_COLOR = RGB(42, 161, 70);
		QY_THEME.DATETABLE_HOVER_DAY_BORDER_COLOR = RGB(255, 120, 0);
		QY_THEME.DATETABLE_CHECK_DAY_BORDER_COLOR = RGB(255, 0, 0);

		QY_THEME.SCROLLBAR_COLOR_NORMAL = QY_THEME.MENU_BK_COLOR_NORMAL;
		QY_THEME.SCROLLBAR_COLOR_SELECT = RGB(106, 106, 106);
		QY_THEME.SCROLLBAR_COLOR_HOVER = RGB(136, 136, 136);
		QY_THEME.SCROLLBAR_ARROW_COLOR_HOVER = RGB(28, 151, 234);
		QY_THEME.SCROLLBAR_ARROW_COLOR_NORMAL = RGB(134, 137, 153);
		QY_THEME.SCROLLBAR_ARROW_COLOR_DOWN = RGB(0, 122, 204);

		QY_THEME.TIMETABLE_HEADER_COLOR = RGB(219, 222, 223);
		QY_THEME.TIMETABLE_ITEM_COLOR = RGB(255, 255, 255);

		QY_THEME.PROGRESS_BK_COLOR = QY_THEME.BUTTON_BK_COLOR_NORMAL;
		QY_THEME.PROGRESS_PROCESS_COLOR = RGB(70, 140, 197);

		QY_THEME.TEXT_COLOR_NORMAL = RGB(222, 222, 222);
		QY_THEME.TEXT_COLOR_HOVER = RGB(222, 222, 222);
		QY_THEME.TEXT_COLOR_SELECT = RGB(28, 151, 234);
		QY_THEME.TEXT_COLOR_DISABLE = RGB(127, 127, 127);

		QY_THEME.TAB_TEXT_COLOR_SELECT = RGB(50, 150, 250);
		QY_THEME.TAB_TEXT_COLOR_NORMAL = RGB(0, 0, 0);

		QY_THEME.SMALL_ARROW_PEN_WIDTH = 1;
		QY_THEME.LARGE_ARROW_PEN_WIDTH = 2;

		QY_THEME.CHECKBOX_WIDTH = 18;
		QY_THEME.CHECKBOX_HEIGHT = 18;
		QY_THEME.ID_CHECK_SELECT_ALL = 11000;
		QY_THEME.SCROLLBAR_WIDTH = 16;
		QY_THEME.PAGE_PANE_HEIGHT = 24;

#endif
}


UINT CApp::MessageBox(QYWindow* pParent,const char *message, UINT nFlag)
{
	if (nullptr != m_msgBox)
	{
		return 1;
	}
	m_msgBox = new QYMessageBox("APP_NAME", message, nFlag);

	UINT ret = m_msgBox->DoModal(pParent);

	SAFE_DELETE(m_msgBox);

	return ret;
}

std::string CApp::floatArrayToString(const float *pF, int size)
{
	std::string sFeatures;
	for (int i = 0; i < size; i++)
	{
		int *nFeatures = (int *)&pF[i];
		char szFeatures[32] = { 0 };
		sprintf_s(szFeatures, 32, "%08X", *nFeatures);

		sFeatures += szFeatures;
	}

	return sFeatures;
}

void CApp::stringToFloatArray(float *pF, int size, const std::string &str)
{
	float fFeatures[128] = { 0 };
	int j = 0;
	for (int i = 0; i < str.length() && j < size; i += 8)
	{
		int nFeatures = 0;
		sscanf_s(str.c_str() + i, "%08X", &nFeatures);
		float *f = (float *)&nFeatures;
		pF[j++] = *f;
	}
}